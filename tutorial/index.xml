<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Horizon</title>
    <link>http://stellar.github.io/go-horizon/tutorial/</link>
    <description>Recent content in Tutorials on Horizon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 May 2015 11:11:53 -0700</lastBuildDate>
    <atom:link href="http://stellar.github.io/go-horizon/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Follow payments sent to an account (Node.js)</title>
      <link>http://stellar.github.io/go-horizon/tutorial/follow_received_payments/</link>
      <pubDate>Wed, 06 May 2015 11:11:53 -0700</pubDate>
      
      <guid>http://stellar.github.io/go-horizon/tutorial/follow_received_payments/</guid>
      <description>

&lt;p&gt;This tutorial shows how easy it is to watch for incoming payments on an account
using javascript and &lt;code&gt;EventSource&lt;/code&gt;.  We will eschew using &lt;code&gt;js-stellar-lib&lt;/code&gt;, the
high-level helper library, to show that it is possible for you to perform this
task on your own, with whatever programming language you would like to use.&lt;/p&gt;

&lt;p&gt;This tutorial assumes that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have node.js installed locally on your machine.&lt;/li&gt;
&lt;li&gt;Have curl installed locally on your machine.&lt;/li&gt;
&lt;li&gt;Are running on Linux, OS X, or any other system that has access to a bash-like
shell.&lt;/li&gt;
&lt;li&gt;Are familiar with launching and running commands in a terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial we will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to create a new account.&lt;/li&gt;
&lt;li&gt;How to fund your account using friendbot&lt;/li&gt;
&lt;li&gt;How to follow payments to your account using EventSource and Server-Sent Events.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-skeleton:ee7aa3ccb5ff4fc52fc070c8f2ca7d98&#34;&gt;Project Skeleton&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s get started by building our project skeleton:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir follow_tutorial
$ cd follow_tutorial
$ npm install --save stellar-base
$ npm install --save eventsource
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should have created a &lt;code&gt;package.json&lt;/code&gt; in the &lt;code&gt;follow_tutorial&lt;/code&gt; directory.
You can check that everything went well by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node -e &amp;quot;require(&#39;stellar-base&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything was successful if no output it generated from the above command.  Now
let&amp;rsquo;s write a script to create a new account.&lt;/p&gt;

&lt;h2 id=&#34;creating-an-account:ee7aa3ccb5ff4fc52fc070c8f2ca7d98&#34;&gt;Creating an account&lt;/h2&gt;

&lt;p&gt;Create a new file named &lt;code&gt;make_account.js&lt;/code&gt; and paste the following text into it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Keypair = require(&amp;quot;stellar-base&amp;quot;).Keypair;

var newAccount = Keypair.random();

console.log(&amp;quot;New account created!&amp;quot;);
console.log(&amp;quot;  Address: &amp;quot; + newAccount.address());
console.log(&amp;quot;  Seed: &amp;quot; + newAccount.seed());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file and run it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node make_account.js
New account created!
  Address: gxk31VU4jeBBtdkUo4YKqCnd66iavjKvn36m1o7W95WtJfPW1g
  Seed: s3SK8u5ghRvPmPNatUcCg8jCC4wbuYoBtZKnWjsxDRRn857Yrvc
$  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before our account can do anything it must be funded.  Indeed, before an account
is funded it does not truly exist!&lt;/p&gt;

&lt;h2 id=&#34;funding-your-account:ee7aa3ccb5ff4fc52fc070c8f2ca7d98&#34;&gt;Funding your account&lt;/h2&gt;

&lt;p&gt;The Stellar test network provides a
&lt;a href=&#34;http://en.wikipedia.org/wiki/Bitcoin_faucet&#34;&gt;currency faucet&lt;/a&gt; that provides
free lumens for developers call Friendbot.  To fund you account, you simply
execute the following curl command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl https://horizon-testnet.stellar.org/friendbot?addr=gxk31VU4jeBBtdkUo4YKqCnd66iavjKvn36m1o7W95WtJfPW1g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to replace the address above with your own.  If the request
succeeds, you should see a response like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
&amp;quot;hash&amp;quot;: &amp;quot;ed9e96e136915103f5d8978cbb2036628e811f2c59c4c3d88534444cf504e360&amp;quot;,
&amp;quot;result&amp;quot;: &amp;quot;received&amp;quot;,
&amp;quot;submission_result&amp;quot;: &amp;quot;000000000000000a0000000000000001000000000000000000000000&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a few seconds, the Stellar network will perform consensus, close the
ledger, and your account will have been created.  Next up we will write a script
that watches for new payments to your account and outputs a message to the
terminal.&lt;/p&gt;

&lt;h2 id=&#34;following-payments:ee7aa3ccb5ff4fc52fc070c8f2ca7d98&#34;&gt;Following payments&lt;/h2&gt;

&lt;h2 id=&#34;testing-it-out:ee7aa3ccb5ff4fc52fc070c8f2ca7d98&#34;&gt;Testing it out&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>